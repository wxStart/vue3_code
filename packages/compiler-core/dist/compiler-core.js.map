{
  "version": 3,
  "sources": ["../src/parser.ts", "../src/index.ts"],
  "sourcesContent": ["import { NodeTypes } from './ast';\n\nfunction createParserContext(content) {\n  return {\n    originalSource: content,\n    source: content, // \u64CD\u4F5C\u7684\u662F\u8FD9\u4E2A\u5B57\u7B26\u4E32\u0192 \u4E0D\u65AD\u89E3\u6790\n    line: 1,\n    column: 1,\n    offest: 0,\n  };\n}\n\nfunction isEnd(context) {\n  return !context.source; // \u5185\u5BB9\u6CA1\u6709\n}\n\n// \u622A\u53D6\u4F4D\u7F6E\nfunction advanceBy(context, n) {\n  // \u5220\u9664  context.source \u524Dn\u4E2A\u5B57\u7B26\n  context.source = context.source.slice(n);\n}\n\nfunction parseTextData(context, endIndex) {\n  const contnet = context.source.slice(0, endIndex);\n\n  advanceBy(context, endIndex);\n\n  return contnet;\n}\nfunction parseText(context) {\n  let tonkens = ['<', '{{']; // \u627E\u5230\u4ED6\u4E24\u79CD\u79BB\u5F97\u6700\u8FD1\u7684\u4E00\u4E2A\n  let endIndex = context.source.length;\n  for (let i = 0; i < tonkens.length; i++) {\n    const index = context.source.indexOf(tonkens[i]);\n    if (index !== -1 && index < endIndex) {\n      endIndex = index;\n    }\n  }\n  // 0 ~ endIndex  \u4E3A\u6587\u672C\u5185\u5BB9\n  let contnet = parseTextData(context, endIndex);\n  console.log('contnet: ', contnet);\n  return {\n    type: NodeTypes.TEXT,\n    contnet\n  }\n}\n\nfunction parserChildren(context) {\n  const nodes = [];\n  while (!isEnd(context)) {\n    const c = context.source;\n    let node;\n    if (c.startsWith('{{')) {\n      // {{  xxx }}\n    } else if (c[0] == '<') {\n      // \u5143\u7D20  </div>\n    } else {\n      // \u6587\u672C   abd {{name}} \u6216\u8005\u662F abd  <div></div>\n      node = parseText(context);\n      debugger\n    }\n    nodes.push(node);\n  }\n}\n\nfunction createRoot(children) {\n  return {\n    type: NodeTypes.ROOT,\n    children,\n  };\n}\n\nexport function parse(template) {\n  // \u6839\u636Etemplate \u4EA7\u751F\u4E00\u68F5\u6811  line  column  offest\n\n  const context = createParserContext(template);\n  const children = parserChildren(context);\n\n  return createRoot(children);\n}\n", "// \u7F16\u8BD1\u4E3B\u8981\u5206\u4E3A\u4E09\u6B65\uFF1A\n// 1. \u9700\u8981\u5C06\u6A21\u7248\u8F6C\u5316\u4E3Aast\u8BED\u6CD5\u6811\n// 2. \u8F6C\u5316\u751F\u6210codegennode\n// 3. \u8F6C\u5316\u6210render\u51FD\u6570\n\nimport { parse } from './parser';\n\nexport { parse };\nexport function compile(template) {\n  const ast = parse(template);\n}\n"],
  "mappings": ";AAEA,SAAS,oBAAoB,SAAS;AACpC,SAAO;AAAA,IACL,gBAAgB;AAAA,IAChB,QAAQ;AAAA;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AACF;AAEA,SAAS,MAAM,SAAS;AACtB,SAAO,CAAC,QAAQ;AAClB;AAGA,SAAS,UAAU,SAAS,GAAG;AAE7B,UAAQ,SAAS,QAAQ,OAAO,MAAM,CAAC;AACzC;AAEA,SAAS,cAAc,SAAS,UAAU;AACxC,QAAM,UAAU,QAAQ,OAAO,MAAM,GAAG,QAAQ;AAEhD,YAAU,SAAS,QAAQ;AAE3B,SAAO;AACT;AACA,SAAS,UAAU,SAAS;AAC1B,MAAI,UAAU,CAAC,KAAK,IAAI;AACxB,MAAI,WAAW,QAAQ,OAAO;AAC9B,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAM,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,CAAC,CAAC;AAC/C,QAAI,UAAU,MAAM,QAAQ,UAAU;AACpC,iBAAW;AAAA,IACb;AAAA,EACF;AAEA,MAAI,UAAU,cAAc,SAAS,QAAQ;AAC7C,UAAQ,IAAI,aAAa,OAAO;AAChC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEA,SAAS,eAAe,SAAS;AAC/B,QAAM,QAAQ,CAAC;AACf,SAAO,CAAC,MAAM,OAAO,GAAG;AACtB,UAAM,IAAI,QAAQ;AAClB,QAAI;AACJ,QAAI,EAAE,WAAW,IAAI,GAAG;AAAA,IAExB,WAAW,EAAE,CAAC,KAAK,KAAK;AAAA,IAExB,OAAO;AAEL,aAAO,UAAU,OAAO;AACxB;AAAA,IACF;AACA,UAAM,KAAK,IAAI;AAAA,EACjB;AACF;AAEA,SAAS,WAAW,UAAU;AAC5B,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEO,SAAS,MAAM,UAAU;AAG9B,QAAM,UAAU,oBAAoB,QAAQ;AAC5C,QAAM,WAAW,eAAe,OAAO;AAEvC,SAAO,WAAW,QAAQ;AAC5B;;;ACvEO,SAAS,QAAQ,UAAU;AAChC,QAAM,MAAM,MAAM,QAAQ;AAC5B;",
  "names": []
}
